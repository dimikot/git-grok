#!/usr/bin/env python3
from __future__ import annotations

import argparse
import json
import os
import re
import shlex
import subprocess
import sys
import traceback
from dataclasses import dataclass
from datetime import datetime
from subprocess import CalledProcessError, Popen, check_output
from typing import Literal, TypeVar

PULL_REQUEST_HEADER = "Pull Request"
BODY_SUFFIX_TITLE = "## PRs in the Stack"
BODY_SUFFIX_TRAIL = "(The stack is managed by git-grok.)"
MAX_BRANCH_LEN_IN_PRINT = 36
MAX_TITLE_LEN_IN_PRINT = 50
DEBUG_FILE = "/tmp/git-grok.log"


#
# A parsed commit from the local git folder.
#
@dataclass
class Commit:
    hash: str
    url: str | None
    title: str
    description: str
    branch: str | None


#
# A parsed remote PR loaded from GitHub.
#
@dataclass
class Pr:
    number: str
    title: str
    body: str
    base_branch: str
    head_branch: str
    url: str
    review_decision: PrReviewDecision


BranchPushResult = Literal["pushed", "up-to-date"]

BranchType = Literal["base", "head"]

PrUpsertResult = Literal["created", "updated", "up-to-date"]

PrReviewDecision = Literal["APPROVED", "REVIEW_REQUIRED", "CHANGES_REQUESTED"]

CommitUpdateResult = Literal["updated", "up-to-date"]

T = TypeVar("T")


class Main:
    shell_commands: list[tuple[list[str], str | None]] = []
    login: str
    remote: str
    debug: bool = False
    remote_base_branch: str = "master"

    #
    # Main entry point.
    #
    def run(self):
        parser = argparse.ArgumentParser(
            description="Pushes local commits as stacked PRs on GitHub and keeps them in sync."
        )
        parser.add_argument(
            "--head",
            default=False,
            action="store_true",
            help="process only the topmost (head) commit",
        )
        parser.add_argument(
            "--debug",
            default=False,
            action="store_true",
            help="print git and gh command lines",
        )
        args = parser.parse_args()

        self.debug = args.debug

        try:
            self.self_update()
            # For debug purposes only.
            self.shell_no_throw(["git", "status"])
            self.shell_no_throw(["git", "log", "--graph", "--decorate", "-3"])
            # Below is the real work.
            self.login = self.gh_get_current_login()
            self.remote = self.git_get_current_remote()
            self.remote_base_branch = self.git_get_current_remote_base_branch()
            if args.head:
                self.run_head()
            else:
                self.run_all()
            print("")
        finally:
            self.debug_log_flush()

    #
    # Runs the sync for only the top commit. This is an internal command which
    # is used during interactive rebase.
    #
    def run_head(self):
        remote_commit = self.git_get_commits(
            latest_ref=f"remotes/{self.remote}/{self.remote_base_branch}",
            count_back_in_time=1,
        )[0]
        commits = self.git_get_commits(latest_ref="HEAD", count_back_in_time=2)
        if len(commits) < 2:
            raise UserException("The repository must have at least 2 commits")
        commit, prev_commit = commits[0], commits[1]

        self.print_header(f"Processing commit: {self.clean_title(commit.title)}")

        if prev_commit.hash != remote_commit.hash:
            prev_commit, result = self.process_commit_push_branch(commit=prev_commit)
            self.print_branch_result(
                type="base", branch=str(prev_commit.branch), result=result
            )
        else:
            self.print_branch_result(
                type="base", branch=self.remote_base_branch, result="up-to-date"
            )
            prev_commit.branch = None

        commit, result = self.process_commit_push_branch(commit=commit)
        self.print_branch_result(type="head", branch=str(commit.branch), result=result)

        if not commit.url:
            assert (
                commit.branch is not None
            ), f"commit {commit.hash} branch must be resolved"
            url, result = self.gh_create_pr(
                base_branch=prev_commit.branch,
                head_branch=commit.branch,
                title=commit.title,
            )
            if result != "up-to-date":
                self.print_pr_created()
            commit.url = url

            result = self.git_update_current_commit_message(
                header_name=PULL_REQUEST_HEADER, header_value=commit.url
            )
            if result != "up-to-date":
                self.print_commit_message_updated()

    #
    # Assuming all PRs in the stack already have PR URLs in their description,
    # pushes the updated branches and updates the PRs descriptions with the full
    # list of commits in the stack.
    #
    def run_all(self):
        commits = self.git_get_commits()
        if len(commits) == 0:
            self.print_header(
                f"There are no local commits on top of {self.remote}. Commit something and rerun."
            )
            return

        # Inject "Pull Request" URL to commit descriptions starting from the
        # commit which doesn't have it. This is a heavy-weighted process which
        # is run for each commit in an interactive rebase, starting from bottom
        # to the very top.
        commit_with_no_url: Commit | None = None
        commit_hashes_to_push_branch: list[str] = []
        for commit in reversed(commits):
            if not commit.url:
                commit_with_no_url = commit
                break
            else:
                commit_hashes_to_push_branch.append(commit.hash)

        if commit_with_no_url:
            self.process_create_missing_prs(
                start_hash=commit_with_no_url.hash,
            )

        # Update PRs for commits; they now all have URLs. Do not push branches
        # for commits for which we have just created missing PRs above (if any),
        # i.e. only push branches for commit_hashes_to_push_branch. This allows
        # to not re-trigger GitHub Actions. Notice that these branches WILL be
        # pushed next time, because we updated the commit message (added "Pull
        # Request" header with the just-created PR URL there which is impossible
        # to predict in advance), i.e. the sequence is "push branch - create PR
        # - update commit message - push branch", but the last step of this
        # sequence is delayed till the next run, when the author has some other
        # updates to piggy-back luckily.
        commits = self.git_get_commits()
        self.process_update_existing_prs(
            commits=commits, commit_hashes_to_push_branch=commit_hashes_to_push_branch
        )

    #
    # Starting from commit with hash start_hash which has no PR URL in the
    # description, creates the missing PRs and updates commits descriptions with
    # the returned URL.
    #
    def process_create_missing_prs(self, *, start_hash: str):
        try:
            self.git_rebase_interactive_exec(
                cmd=shlex.join(
                    [__file__, "--head", *(["--debug"] if self.debug else [])]
                ),
                start_hash=start_hash,
            )
        except (CalledProcessError, KeyboardInterrupt) as e:
            self.shell_no_throw(["git", "rebase", "--abort"])
            raise e

    #
    # Iterates over the list of commits with URLs and pushes their branches to
    # update the corresponding PRs.
    #
    def process_update_existing_prs(
        self, *, commits: list[Commit], commit_hashes_to_push_branch: list[str]
    ):
        # We must iterate from the oldest commit to the newest one, because
        # previous commit PR's branch becomes the next commit PR's base branch.
        commits_chronological = list(reversed(commits))
        for i, commit in enumerate(commits_chronological):
            self.print_header(f"\nUpdating PR: {self.clean_title(commit.title)}")

            if commit.hash in commit_hashes_to_push_branch:
                commit, result = self.process_commit_push_branch(commit=commit)
                if result == "pushed":
                    self.print_branch_result(
                        type="head", branch=str(commit.branch), result=result
                    )
                commits_chronological[i] = commit

            assert (
                commit.url is not None
            ), f"commit {commit.hash} PR url is expected to be in the message at this point"
            pr, result = self.process_update_pr(
                prev_commit=commits_chronological[i - 1] if i > 0 else None,
                commit=commit,
                commits=commits,
            )
            self.print_pr_result(
                url=pr.url, result=result, review_decision=pr.review_decision
            )
            commits_chronological[i].branch = pr.head_branch

    #
    # Pushes an existing branch (it we know this commit's PR URL by querying
    # GitHub), or creates a new branch based on commit title and pushes it.
    #
    def process_commit_push_branch(
        self, *, commit: Commit
    ) -> tuple[Commit, BranchPushResult]:
        if commit.url:
            pr = self.gh_get_pr(url=commit.url)
            commit.branch = pr.head_branch
        else:
            commit.branch = self.build_branch_name(commit.title)
        pushed = self.git_push_branch(branch=commit.branch, hash=commit.hash)
        return commit, pushed

    #
    # Updates PR fields:
    # - base branch (in case the commits were reordered, or some of them were
    #   merged into the remote, so the the beginning of the stack started
    #   pointing not to a branch, but to a remote tip)
    # - full stack list in the description
    #
    # It's BTW not possible to update the head branch once PR is created.
    #
    def process_update_pr(
        self, *, prev_commit: Commit | None, commit: Commit, commits: list[Commit]
    ) -> tuple[Pr, PrUpsertResult]:
        body_suffix: list[str] = []
        for c in commits:
            assert (
                c.url is not None
            ), f"commit {c.hash} PR URL is expected to be in the message at this point"
            m = re.search(r"/(\d+)$", str(c.url))
            if m:
                body_suffix.append(
                    f"- {'➡ ' if c.hash == commit.hash else ''}#{m.group(1)}"
                )
        assert (
            commit.url is not None
        ), f"commit {commit.hash} PR URL is expected to be in the message at this point"
        return self.gh_update_pr(
            url=commit.url,
            base_branch=prev_commit.branch if prev_commit else None,
            body_suffix_title=BODY_SUFFIX_TITLE,
            body_suffix_body="\n".join(body_suffix) + "\n\n" + BODY_SUFFIX_TRAIL,
        )

    #
    # Returns current GitHub login.
    #
    def gh_get_current_login(self):
        return self.shell(["gh", "api", "user", "--jq", ".login"])

    #
    # Returns current git folder remote (most often "origin").
    #
    def git_get_current_remote(self):
        return self.shell(["git", "remote", "show"])

    #
    # Returns the current remote branch name on GitHub.
    #
    def git_get_current_remote_base_branch(self):
        branch = self.shell(["git", "branch", "--show-current"])
        if not branch:
            path = ".git/rebase-merge/head-name"
            file = find_file_in_parents(path)
            if file:
                branch = open(file).readline().strip()
                m = re.match(r"refs/heads/(.+)", branch)
                if not m:
                    raise UserException(f"File {path} doesn't contain refs/heads/*")
                branch = m.group(1)
            else:
                raise UserException(
                    f"You must be on a branch or in an interactive rebase mode."
                )
        return branch

    #
    # Returns current git folder owner name and repository name.
    #
    def gh_get_current_repo(self):
        return self.shell(
            [
                "gh",
                "repo",
                "view",
                "--json",
                "owner,name",
                "--jq",
                "[.owner.login,.name]|join('/')",
            ]
        )

    #
    # Creates a GitHub PR between two existing branches.
    #
    def gh_create_pr(
        self, *, base_branch: str | None, head_branch: str, title: str
    ) -> tuple[str, PrUpsertResult]:
        if not base_branch:
            base_branch = self.remote_base_branch
        body_file = find_file_in_parents(".github/pull_request_template.md")
        cmd = [
            "gh",
            "pr",
            "create",
            "--base",
            base_branch,
            "--head",
            head_branch,
            "--title",
            title,
            *(["--body-file", body_file] if body_file else ["--body", ""]),
        ]
        returncode, output, stderr = self.shell_no_throw(cmd)
        if returncode == 0:
            return output, "created"
        m = re.match(r".* already exists[^\n]\n(\S+)", stderr, flags=re.S)
        if m:
            return m.group(1), "up-to-date"
        raise CalledProcessError(
            returncode=returncode, cmd=cmd, output=output, stderr=stderr
        )

    #
    # Updates base_branch and description suffix of the PR.
    #
    def gh_update_pr(
        self,
        *,
        url: str,
        base_branch: str | None,
        body_suffix_title: str,
        body_suffix_body: str,
    ) -> tuple[Pr, PrUpsertResult]:
        if base_branch is None:
            base_branch = self.remote_base_branch

        pr = self.gh_get_pr(url=url)
        parts = re.split(
            r"^" + re.escape(body_suffix_title) + r"[^\n]*\n",
            pr.body,
            flags=re.M,
        )
        new_body = (
            (parts[0] if len(parts) > 1 else pr.body.rstrip() + "\n\n")
            + body_suffix_title
            + "\n"
            + body_suffix_body
        )
        if pr.base_branch == base_branch and pr.body == new_body:
            return pr, "up-to-date"
        self.shell(
            [
                "gh",
                "pr",
                "edit",
                url,
                "--base",
                base_branch,
                "--body-file",
                "-",
            ],
            input=new_body,
        )
        pr.base_branch = base_branch
        pr.body = new_body
        return pr, "updated"

    #
    # Reads PR info from GitHub.
    #
    def gh_get_pr(self, *, url: str):
        out = json.loads(
            self.shell(
                [
                    "gh",
                    "pr",
                    "view",
                    url,
                    "--json",
                    "number,title,body,baseRefName,headRefName,url,reviewDecision",
                ],
            )
        )
        return Pr(
            number=out["number"],
            title=out["title"],
            body=out["body"],
            base_branch=re.sub(r"^refs/heads/", "", out["baseRefName"]),
            head_branch=re.sub(r"^refs/heads/", "", out["headRefName"]),
            url=out["url"],
            review_decision=out["reviewDecision"],
        )

    #
    # Returns parsed commits between two refs.
    #
    def git_get_commits(
        self,
        *,
        latest_ref: str | None = None,
        earliest_ref: str | None = None,
        count_back_in_time: int | None = None,
    ):
        if latest_ref is None:
            latest_ref = "HEAD"
        if earliest_ref is None:
            earliest_ref = f"remotes/{self.remote}/{self.remote_base_branch}"
        if count_back_in_time:
            out = self.shell(["git", "log", latest_ref, f"-{count_back_in_time}"])
        else:
            out = self.shell(["git", "log", f"{earliest_ref}..{latest_ref}"])
        commits: list[Commit] = []
        for commit in re.split(r"^(?=commit )", out, flags=re.M)[1:]:
            try:
                m = re.match(r"commit (\w+)[^\n]*\n(.*?)\n\n(.*)$", commit, flags=re.S)
                if not m:
                    raise UserException("Can't parse commit-headers-body.")
                hash, _headers, body = m.group(1), m.group(2), m.group(3).rstrip()

                m = re.match(r"([^\n]+)\n?(.*)$", body, flags=re.S)
                if not m:
                    raise UserException(f"Can't extract commit title and description.")
                title, description = m.group(1).strip(), m.group(2)

                m = re.search(
                    rf"^\s+{PULL_REQUEST_HEADER}: (https://\S+)",
                    description,
                    flags=re.M,
                )
                url = m.group(1).strip() if m else None
            except UserException as e:
                raise UserException(f"{str(e)} Commit:\n<<<\n{commit.strip()}\n>>")
            except BaseException as e:
                tb = traceback.format_exc()
                raise UserException(f"{tb}\nCommit:\n<<<\n{commit.strip()}\n>>\n\n")

            commits.append(
                Commit(
                    hash=hash,
                    url=url,
                    title=title,
                    description=description,
                    branch=None,
                )
            )
        return commits

    #
    # Pushes a branch to remote GitHub.
    #
    def git_push_branch(self, *, branch: str, hash: str) -> BranchPushResult:
        existing_hash = self.shell_no_throw(
            ["git", "show", "-s", "--format=%H", f"remotes/{self.remote}/{branch}"]
        )[1]
        if existing_hash == hash:
            return "up-to-date"
        self.shell(
            [
                "git",
                "push",
                "--quiet",
                "-f",
                self.remote,
                f"{hash}:refs/heads/{branch}",
            ],
        )
        return "pushed"

    #
    # Runs an interactive rebase with the provided shell command.
    #
    def git_rebase_interactive_exec(self, *, cmd: str, start_hash: str):
        self.shell_passthrough(
            [
                "git",
                "rebase",
                "--quiet",
                "--interactive",
                "--exec",
                cmd,
                f"{start_hash}^",
            ],
            env={"GIT_EDITOR": "true"},
            skip_re=r"Executing: ",
        )

    #
    # Updates the message suffix (pointing to a PR URL) of the current commit
    # which is at the moment selected (activated) with interactive rebase.
    #
    def git_update_current_commit_message(
        self, *, header_name: str, header_value: str
    ) -> CommitUpdateResult:
        new_header = f"{header_name}: {header_value}"
        message = self.shell(
            ["git", "show", "--pretty=format:%B", "--no-patch"],
            no_rstrip=True,
        )
        m = re.search(rf"^{header_name}: [^\n]+", message, flags=re.M)
        if m:
            new_message = message.replace(m[0], new_header)
        else:
            new_message = f"{message.rstrip()}\n\n{new_header}"
        if new_message != message:
            self.shell(["git", "commit", "--amend", "-F", "-"], input=new_message)
            return "updated"
        else:
            return "up-to-date"

    #
    # Runs a shell command returning results.
    #
    def shell(
        self,
        cmd: list[str],
        *,
        no_rstrip: bool = False,
        input: str | None = None,
        env: dict[str, str] | None = None,
    ) -> str:
        out = None
        try:
            out = check_output(
                cmd, text=True, stderr=subprocess.PIPE, input=input, env=env
            )
            return out if no_rstrip else out.rstrip()
        finally:
            self.debug_log_shell_command(cmd=cmd, out=out)

    #
    # Same as shell(), but never throws and returns an exit code along with the
    # outputs instead.
    #
    def shell_no_throw(
        self,
        cmd: list[str],
        *,
        no_rstrip: bool = False,
        env: dict[str, str] | None = None,
    ) -> tuple[int, str, str]:
        stdout = ""
        stderr = ""
        try:
            proc = Popen(
                cmd,
                text=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env={**os.environ, **env} if env else None,
            )
            stdout, stderr = proc.communicate()
            if not no_rstrip:
                stdout = stdout.rstrip()
                stderr = stderr.rstrip()
            return (
                proc.returncode,
                stdout,
                stderr,
            )
        finally:
            self.debug_log_shell_command(
                cmd=cmd, out="\n".join([s for s in [stdout, stderr] if s])
            )

    #
    # Runs a shell command, but prints its output as is.
    #
    def shell_passthrough(
        self,
        cmd: list[str],
        *,
        env: dict[str, str] | None = None,
        skip_re: str | None = None,
    ):
        out = ""
        try:
            with Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                env={**os.environ, **env} if env else None,
            ) as pipe:
                assert pipe.stdout is not None
                for line in pipe.stdout:
                    line = line.rstrip()
                    if not line:
                        continue
                    out += line + "\n"
                    if skip_re == None or not re.search(skip_re, line, flags=re.S):
                        print(line)
                        sys.stdout.flush()
                returncode = pipe.wait()
                if returncode != 0:
                    raise CalledProcessError(returncode=returncode, cmd=cmd)
        finally:
            self.debug_log_shell_command(cmd=cmd, out=out)

    #
    # Tries to self-update the tool by pulling from git.
    #
    def self_update(self):
        dir = os.path.dirname(os.path.realpath(__file__))
        if not os.path.exists(f"{dir}/.git"):
            return
        self.shell_no_throw(
            ["bash", "-c", f"cd {shlex.quote(dir)} && git pull --rebase"]
        )

    #
    # Cleans a title from useless prefix/suffix.
    #
    def clean_title(self, title: str):
        title = title.strip()
        title = re.sub(r"^\w+[()\[\]\w]*:\s+", "", title)
        title = re.sub(r"\[[-\w]+\]$", "", title)
        if len(title) > MAX_TITLE_LEN_IN_PRINT + 3:
            title = title[0:MAX_TITLE_LEN_IN_PRINT] + "…"
        return title.strip()

    #
    # Builds branch name from commit title.
    #
    def build_branch_name(self, title: str):
        branch = title
        branch = branch.strip()
        branch = re.sub(r"\[[-\w]+\]$", "", branch)
        branch = branch.lower()
        branch = re.sub(r"^\W+|\W+$", "", branch)
        branch = re.sub(r"\W+", "-", branch)
        return f"grok/{self.login}/{branch}"

    #
    # Prints a status after a branch push attempt happened.
    #
    def print_branch_result(
        self, *, type: BranchType, branch: str, result: BranchPushResult
    ):
        if len(branch) > MAX_BRANCH_LEN_IN_PRINT:
            branch = branch[0:MAX_BRANCH_LEN_IN_PRINT] + "…"
        print(f"  ── {type}: {self.remote}/{branch} ({result})")
        sys.stdout.flush()

    #
    # Prints a "PR created" message.
    #
    def print_pr_created(self):
        print(f"  ── new Pull Request created")
        sys.stdout.flush()

    #
    # Prints a status after a commit message was updated locally.
    #
    def print_commit_message_updated(self):
        print(f"  ── updated commit message")
        sys.stdout.flush()

    #
    # Prints a status after a PR was created/updated on GitHub.
    #
    def print_pr_result(
        self, *, url: str, result: PrUpsertResult, review_decision: PrReviewDecision
    ):
        icon = (
            review_decision == "APPROVED"
            and "🟢"
            or review_decision == "CHANGES_REQUESTED"
            and "🔴"
            or "🟡"
        )
        print(f"  {icon} {url} ({result})")
        sys.stdout.flush()

    #
    # Prints the heading message of an operation.
    #
    def print_header(self, header: str):
        print(header)
        sys.stdout.flush()

    #
    # Logs a command which is run by the tool.
    #
    def debug_log_shell_command(self, *, cmd: list[str], out: str | None):
        self.shell_commands.append((cmd, out))

    #
    # Prints some debug info.
    #
    def debug_log_flush(self):
        out: list[tuple[tuple[int, int, int], str]] = []
        for cmd in self.shell_commands:
            out.append(((128, 128, 128), "$ " + shlex.join(cmd[0]).strip()))
            if cmd[1]:
                out.append(
                    (
                        (92, 92, 92),
                        re.sub(
                            r"^",
                            "  ",
                            re.sub(r"\n([| \t]*\n)+", "\n", cmd[1].rstrip()),
                            flags=re.M,
                        ),
                    )
                )
        try:
            with open(DEBUG_FILE, "a+") as file:
                file.write(f"=== {datetime.now()}\n")
                for row in out:
                    file.write(row[1] + "\n")
                file.write("\n")
        except:
            pass

        if self.debug:
            for row in out:
                print(colored(*row[0], row[1]))
            sys.stdout.flush()


#
# Splits a list into chunks of size n.
#
def chunk(lst: list[T], n: int) -> list[list[T]]:
    res: list[list[T]] = []
    for i in range(0, len(lst), n):
        res.append(lst[i : i + n])
    return res


#
# Returns a colored text.
#
def colored(r: int, g: int, b: int, text: str):
    return f"\033[38;2;{r};{g};{b}m{text}\033[0m"


#
# Traverse the filesystem from the current directory to root trying to find a
# matching relative file path in parent directories.
#
def find_file_in_parents(file: str):
    path = os.getcwd()
    old_path = None
    while old_path != path:
        full = os.path.join(path, file)
        if os.path.exists(full):
            return full
        old_path = path
        path = os.path.dirname(path)
    return None


#
# If raised, the stacktrace is not shown.
#
class UserException(Exception):
    pass


if __name__ == "__main__":
    try:
        sys.exit(Main().run())
    except UserException as e:
        print(str(e))
        sys.exit(1)
    except CalledProcessError as e:
        print(
            f'Command "{shlex.join(e.cmd)}" returned status {e.returncode}.'
            + (f"\n{e.stderr}" if e.stderr else ""),
            file=sys.stderr,
        )
        sys.exit(2)
